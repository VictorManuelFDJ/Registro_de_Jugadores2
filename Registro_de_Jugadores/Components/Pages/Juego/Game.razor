@page "/game/{PartidaId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@inject JugadoresServices jugadoresService
@inject PartidasService partidaService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Juego</PageTitle>

<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">
    <div class="game-container">
        <h2 class="game-status">@GameStatus</h2>
        <div class="game-screen">
            <div class="game-board">
                @for (var i = 0; i < 9; i++)
                {
                    var cellIndex = i;
                    <button class="cell @GetPlayerClass(board[cellIndex])"
                            @onclick="() => HandleCellClick(cellIndex)"
                            disabled="@IsCellDisabled(cellIndex)">
                        @board[cellIndex]?.ToString()
                    </button>
                }
            </div>
            <button class="btn btn-secondary mt-4" @onclick="RestartGame">
                Reiniciar Juego
            </button>
        </div>
    </div>
</div>

@code {
    private enum PlayerType { X, O }

    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType? winner;
    private bool esEmpate;

    [Parameter]
    public int? PartidaId { get; set; }

    private string nombreJugador1;
    private string nombreJugador2;
    private Partidas partidaActual = new Partidas();

    private HubConnection hubConnection;
    private int currentJugadorId;

    protected override async Task OnParametersSetAsync()
    {
        if (!PartidaId.HasValue) return;

        
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var qs = QueryHelpers.ParseQuery(uri.Query);
        if (qs.TryGetValue("jugadorId", out var val) && int.TryParse(val, out var jId))
        {
            currentJugadorId = jId;
        }
        else
        {
            
            await JSRuntime.InvokeVoidAsync("alert", "Debe enviar ?jugadorId=ID en la URL");
            navigationManager.NavigateTo("/");
            return;
        }

        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, int, string, int?>("ReceiveState", (estadoTablero, turnoId, estadoPartida, ganadorId) =>
        {
            
            for (int i = 0; i < 9; i++)
            {
                var c = estadoTablero.Length > i ? estadoTablero[i] : '-';
                if (c == 'X') board[i] = PlayerType.X;
                else if (c == 'O') board[i] = PlayerType.O;
                else board[i] = null;
            }

            partidaActual.EstadoTablero = estadoTablero;
            partidaActual.TurnoJugadorId = turnoId;
            partidaActual.EstadoPartida = estadoPartida;
            partidaActual.GanadorId = ganadorId;

            winner = DetermineWinnerFromBoard();
            esEmpate = board.All(b => b != null) && winner == null;

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("Error", async (msg) =>
        {
            await JSRuntime.InvokeVoidAsync("alert", msg);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGame", PartidaId.Value, currentJugadorId);

       
        partidaActual = await partidaService.Buscar(PartidaId.Value);
        if (partidaActual != null)
        {
            var j1 = await jugadoresService.Buscar(partidaActual.Jugador1Id);
            var j2 = await jugadoresService.Buscar(partidaActual.Jugador2Id);
            nombreJugador1 = j1?.Nombre;
            nombreJugador2 = j2?.Nombre;
        }

        
        var estado = partidaActual?.EstadoTablero ?? "---------";
        for (int i = 0; i < 9; i++)
        {
            var c = estado.Length > i ? estado[i] : '-';
            if (c == 'X') board[i] = PlayerType.X;
            else if (c == 'O') board[i] = PlayerType.O;
            else board[i] = null;
        }
    }

    private string GameStatus
    {
        get
        {
            if (winner != null)
            {
                var nombreGanador = winner == PlayerType.X ? nombreJugador1 : nombreJugador2;
                return $"🏆 ¡Ganador: {nombreGanador}!";
            }
            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {(partidaActual?.TurnoJugadorId == partidaActual?.Jugador1Id ? nombreJugador1 : nombreJugador2)}";
        }
    }

    private async Task HandleCellClick(int index)
    {
        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected) return;
        if (partidaActual?.TurnoJugadorId != currentJugadorId) return;
        await hubConnection.SendAsync("MakeMove", PartidaId.Value, index, currentJugadorId);
    }

    private PlayerType? DetermineWinnerFromBoard()
    {
        int[][] lines = new[]
        {
            new[]{0,1,2}, new[]{3,4,5}, new[]{6,7,8},
            new[]{0,3,6}, new[]{1,4,7}, new[]{2,5,8},
            new[]{0,4,8}, new[]{2,4,6}
        };

        foreach (var line in lines)
        {
            var a = board[line[0]];
            if (a.HasValue && a == board[line[1]] && a == board[line[2]])
                return a;
        }
        return null;
    }

    private bool IsCellDisabled(int index)
    {
        return board[index] != null
               || winner != null
               || esEmpate
               || partidaActual?.TurnoJugadorId != currentJugadorId
               || hubConnection == null
               || hubConnection.State != HubConnectionState.Connected;
    }

    private void RestartGame()
    {
       
        navigationManager.NavigateTo("/");
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
}