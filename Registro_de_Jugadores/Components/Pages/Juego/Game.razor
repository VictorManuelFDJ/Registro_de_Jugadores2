@page "/game/{jugador1Id:int}/{jugador2Id:int}"
@page "/game/{PartidaId:int}"

@inject JugadoresServices jugadoresService
@inject PartidasService partidaService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Juego</PageTitle>

<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">
    <div class="game-container">
        <h2 class="game-status">@GameStatus</h2>
        <div class="game-screen">
            <div class="game-board">
                @for (var i = 0; i < 9; i++)
                {
                    var cellIndex = i;
                    <button class="cell @GetPlayerClass(board[cellIndex])"
                            @onclick="() => HandleCellClick(cellIndex)"
                            disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                        @board[cellIndex]?.ToString()
                    </button>
                }
            </div>
            <button class="btn btn-secondary mt-4" @onclick="RestartGame">
                Reiniciar Juego
            </button>
        </div>
    </div>
</div>

@code {
    private enum PlayerType { X, O }

    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;
    
    [Parameter]
    public int? jugador1Id { get; set; }
    [Parameter]
    public int? jugador2Id { get; set; }
    [Parameter]
    public int? PartidaId {get; set;}
    
    private string nombreJugador1;
    private string nombreJugador2;
    private Dictionary<int, PlayerType> jugadorIdToPlayerType = new Dictionary<int, PlayerType>();
    private Dictionary<PlayerType, string> playerTypeToNombre = new Dictionary<PlayerType, string>();

    private Partidas partidaActual = new Partidas();

    protected override async Task OnParametersSetAsync()
    {
       
        if (PartidaId.HasValue)
        {
            partidaActual = await partidaService.Buscar(PartidaId.Value);
            if (partidaActual != null)
            {
                var jugador1 = await jugadoresService.Buscar(partidaActual.Jugador1Id);
                var jugador2 = await jugadoresService.Buscar(partidaActual.Jugador2Id);
                
                nombreJugador1 = jugador1.Nombre;
                nombreJugador2 = jugador2.Nombre;

                jugadorIdToPlayerType[jugador1.JugadorId] = PlayerType.X;
                jugadorIdToPlayerType[jugador2.JugadorId] = PlayerType.O;

                playerTypeToNombre[PlayerType.X] = nombreJugador1;
                playerTypeToNombre[PlayerType.O] = nombreJugador2;

                
                for (int i = 0; i < 9; i++)
                {
                    char cell = partidaActual.EstadoTablero[i];
                    if (cell == 'X') board[i] = PlayerType.X;
                    else if (cell == 'O') board[i] = PlayerType.O;
                    else board[i] = null;
                }

                
                if (partidaActual.TurnoJugadorId == jugador1.JugadorId)
                {
                    _currentPlayerType = PlayerType.X;
                }
                else
                {
                    _currentPlayerType = PlayerType.O;
                }
            }
        }
        
        else if (jugador1Id.HasValue && jugador2Id.HasValue)
        {
            var jugador1 = await jugadoresService.Buscar(jugador1Id.Value);
            var jugador2 = await jugadoresService.Buscar(jugador2Id.Value);

            nombreJugador1 = jugador1.Nombre;
            nombreJugador2 = jugador2.Nombre;

            jugadorIdToPlayerType[jugador1Id.Value] = PlayerType.X;
            jugadorIdToPlayerType[jugador2Id.Value] = PlayerType.O;

            playerTypeToNombre[PlayerType.X] = nombreJugador1;
            playerTypeToNombre[PlayerType.O] = nombreJugador2;

            _currentPlayerType = PlayerType.X;
            board = new PlayerType?[9];

            partidaActual = new Partidas
            {
                Jugador1Id = jugador1Id.Value,
                Jugador2Id = jugador2Id.Value,
                EstadoPartida = "En Proceso",
                EstadoTablero = "---------",
                TurnoJugadorId = jugador1Id.Value,
                FechaInicio = DateTime.UtcNow
            };
            await partidaService.Guardar(partidaActual);
        }
    }

    private string GameStatus
    {
        get
        {
            if (winner != null)
            {
                var nombreGanador = winner == PlayerType.X ? nombreJugador1 : nombreJugador2;
                return $"🏆 ¡Ganador: {nombreGanador}!";
            }
            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {(playerTypeToNombre.ContainsKey(_currentPlayerType) ? playerTypeToNombre[_currentPlayerType] : "")}";
        }
    }

    private async Task HandleCellClick(int index)
    {
        if (board[index] != null || winner != null || esEmpate)
        {
            return;
        }
        board[index] = _currentPlayerType;

        winner = CheckForWinner();
        if (winner != null)
        {
            partidaActual.GanadorId = winner == PlayerType.X ? partidaActual.Jugador1Id : partidaActual.Jugador2Id;
            partidaActual.EstadoPartida = "Finalizada";
            partidaActual.EstadoTablero = string.Join("", board.Select(p => p?.ToString() ?? "-"));
            partidaActual.FechaFin = DateTime.UtcNow;
            await partidaService.Guardar(partidaActual);
            await ActualiazarEstaditicasJugadores(partidaActual.GanadorId);
            return;
        }

        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            partidaActual.GanadorId = null;
            partidaActual.EstadoPartida = "Empate";
            partidaActual.EstadoTablero = string.Join("", board.Select(p => p?.ToString() ?? "-"));
            partidaActual.FechaFin = DateTime.UtcNow;
            await partidaService.Guardar(partidaActual);
            await ActualiazarEstaditicasJugadores(null);
            return;
        }
        _currentPlayerType = (_currentPlayerType == PlayerType.X) ? PlayerType.O : PlayerType.X;
        partidaActual.TurnoJugadorId = _currentPlayerType == PlayerType.X ? partidaActual.Jugador1Id : partidaActual.Jugador2Id;
        partidaActual.EstadoTablero = string.Join("", board.Select(p => p?.ToString() ?? "-"));
        await partidaService.Guardar(partidaActual);
    }

    private async Task ActualiazarEstaditicasJugadores(int? ganadorId)
    {
        var jugador1 = await jugadoresService.Buscar(partidaActual.Jugador1Id);
        var jugador2 = await jugadoresService.Buscar(partidaActual.Jugador2Id);

        if (ganadorId.HasValue)
        {
            if (ganadorId == jugador1.JugadorId)
            {
                jugador1.Victorias++;
                jugador2.Derrotas++;
            }
            else
            {
                jugador2.Victorias++;
                jugador1.Derrotas++;
            }
        }
        else
        {
            jugador1.Empate++;
            jugador2.Empate++;
        }

        await jugadoresService.Guardar(jugador1);
        await jugadoresService.Guardar(jugador2);
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
            new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},
            new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},
            new[] {0, 4, 8}, new[] {2, 4, 6}
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }
        return null;
    }

    private void RestartGame()
    {
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
        
        navigationManager.NavigateTo("/");
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }

    private string RenderPlayer(PlayerType? player)
    {
        if (player.HasValue)
        {
            return player == PlayerType.X ? "X" : "O";
        }
        return "";
    }
}