@page "/jugadores/edit/{JugadorId:int}"
@inject JugadoresServices jugadoresService
@inject NavigationManager navigationManager
@inject IToastService toastService

@*HTML*@
<PageTitle>Modificar</PageTitle>
<EditForm Model="jugador" OnValidSubmit="Modificar">
        <DataAnnotationsValidator />
        <ValidationSummery />

        <div class="container">
            <div class="card shadow-lg">
                <div class="card-header text-center">
                    <h5 class="card-title">Modificar Jugador</h5>
                </div>

                <div class="card_body">
                    @*Nombre*@
                    <div class= "mb-3">
                         <label class="form-label"><strong>Nombre</strong></label>
                         <InputText class="form-control" @bind-Value="jugador.Nombre"></InputText>
                         <ValidationMessage For="@(() => jugador.Nombre)" />
                    </div>
                    @*Partidas*@
                    <div class="mb-3">
                        <label class="form-label"><strong>Partidas</strong></label>
                        <InputNumber class="form-control" @bind-Value="jugador.Partidas"></InputNumber>
                        <ValidationMessage For="@(() => jugador.Partidas)" />
                    </div>
                </div>

                @*footer*@
                <div class="card-footer text-canter mt-2">
                    <a href="/jugadores" class="btn btn-secondary">
                        <span class="bi bi-arrow-left"></span> Volver
                    </a> 
                    <button type="submit" class="btn btn-floppy" @onclick="Modificar"> Modificar</button>
                    <button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
                </div>
            </div>
        </div>
</EditForm>
@code {
    [Parameter]
    public int JugadorId {get; set; }

    public Jugadores jugador {get; set; } = new Jugadores();
    public string Mensaje {get; set; } = string.Empty;
    public List<Jugadores> ListaNombres {get; set; } = new List<Jugadores>();

    protected override async Task OnInitializedAsync()
    {
      jugador = await jugadoresService.Buscar(JugadorId);
      ListaNombres = await jugadoresService.Listar(j => j.JugadorId > 0);
    }

    public async Task Modificar()
    {
        var creado = await jugadoresService.Guardar(jugador);
        if(creado)
        {
            toastService.ShowSuccess("Se ha modificado correctamente");
        }
        else
        {
            toastService.ShowError("No se ha podido modificar correctamente");
        }
    }

    private async Task Eliminar(){
        var eliminado = await jugadoresService.Eliminar(jugador.JugadorId);

        if(eliminado)
        {
            toastService.ShowSuccess("Se ha eliminado corretamente");
            navigationManager.NavigateTo("/jugadores");
        }else
        {
            toastService.ShowError("No se ha podido eliminar correctamente");
        }
    }
    
}