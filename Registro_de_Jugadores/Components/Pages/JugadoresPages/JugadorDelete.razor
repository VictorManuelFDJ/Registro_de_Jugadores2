@page "/jugadores/delete/{JugadorId:int}"
@inject JugadoresServices JugadoresService
@inject NavigationManager NavigationManager

<div class="card shadow-lg">
    <div class="card-header">
        <h3><strong>Eliminar Jugador</strong></h3>
    </div>
    <div class="card-body">
        <h4>¿Estás seguro de que quieres eliminar este jugador?</h4>
        <ul class="list-group">
            <li class="list-group-item"><strong>ID:</strong> @jugador.JugadorId</li>
            <li class="list-group-item"><strong>Nombre:</strong> @jugador.Nombre</li>
            <li class="list-group-item"><strong>Partidas Jugadas:</strong> @jugador.Partidas</li>
        </ul>
    </div>
    <div class="card-footer">
        <button class="btn btn-danger" @onclick="Eliminar"><i class="bi bi-trash-fill"></i> Eliminar</button>
        <a href="/jugadores" class="btn btn-secondary">Cancelar</a>
    </div>
</div>

@code {
    [Parameter]
    public int JugadorId { get; set; }

    private Jugadores jugador = new Jugadores();

    protected override async Task OnInitializedAsync()
    {
        if (JugadorId > 0)
        {
            var encontrado = await JugadoresService.Buscar(JugadorId);
            if (encontrado != null)
            {
                jugador = encontrado;
            }
        }
    }

    private async Task Eliminar()
    {
        var eliminado = await JugadoresService.Eliminar(JugadorId);
        if (eliminado)
        {
            NavigationManager.NavigateTo("/jugadores");
        }
    }
}